@page "/classifier"
@using System.Text.Json;
@using AILearning.Helper;
@using AILearning.Model;
@using System.Text;
@using System.Net;
@inject HttpClient httpClient;
@inject IJSRuntime jsRuntime;
@using System.IO

<h3>Classifier</h3>
<MudPaper Elevation="3" Class="pa-5 mb-5">
    <InputFile id="fileInput" OnChange="UploadFiles" hidden />
    <MudButton HtmlTag="label"
               Variant="Variant.Filled"
               Color="Color.Success"
               StartIcon="@Icons.Filled.CloudUpload"
               for="fileInput">
        Upload Files
    </MudButton>
    <MudText Style="margin-top:20px">@_fileName</MudText>
</MudPaper>
<MudPaper Elevation="3" Class="pa-5 mb-5">
    <MudGrid Class="">
        <MudItem md="3" xs="12">
            <MudSelect T="string" Label="Train Column" SelectedValuesChanged="SelectedSenteceChanged" @bind-Value="_selectedSentence" AnchorOrigin="Origin.BottomCenter">
                @foreach (var item in _sentenceColumn)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        @if (!string.IsNullOrEmpty(_selectedSentence))
        {
             <MudItem md="3" xs="12">
                <MudSelect T="string" Label="Label Columns" MultiSelection=true @bind-SelectedValues="_labels" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var item in _labelsColumn)
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>   
            </MudItem>
            <MudItem Style="margin-top:17px" md="3" xs="12">
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Success"
                           StartIcon="@Icons.Filled.Train"
                           OnClick="Train">
                    Train
                </MudButton>
            </MudItem>
        }
       
    </MudGrid>
</MudPaper>
@code {
    string _selectedSentence { get; set; }
    List<string> _sentenceColumn { get; set; } = new List<string>();
    List<string> _labelsColumn { get; set; } = new List<string>();
    IEnumerable<string> _labels { get; set; }
    string _fileName { get; set; }
    ClassifierUploadResultDto result = new ClassifierUploadResultDto();
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        _sentenceColumn = new List<string>();
        _labelsColumn = new List<string>();
        _selectedSentence = string.Empty;
        StateHasChanged();
        var file = e.File;

        var fileData = new FileDataDto();
        MemoryStream ms = new MemoryStream();
        await file.OpenReadStream(512000000).CopyToAsync(ms);
        var bytes = ms.ToArray();
        fileData.FileName = file.Name;
        _fileName = file.Name;
        fileData.FileSize = file.Size;
        fileData.FileType = file.ContentType;
        fileData.Base64string = System.Convert.ToBase64String(bytes);


        var content = JsonSerializer.Serialize(fileData);
        var bodyContent = new StringContent(content, Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync("http://localhost:7001/upload", bodyContent);
        result = await response.Content.ReadFromJsonAsync<ClassifierUploadResultDto>();
        _sentenceColumn.AddRange(result.Result);
        _labelsColumn.AddRange(result.Result);
        StateHasChanged();
    }

    private void SelectedSenteceChanged()
    {
        _labelsColumn = new List<string>();
        _labelsColumn.AddRange(result.Result);
        _labelsColumn.Remove(_selectedSentence);
        StateHasChanged();
    }

    private async Task Train()
    {
        TrainDto train = new TrainDto();
        train.FileName = _fileName;
        train.Sentence = _selectedSentence;
        train.Labels = _labels.ToList();
        var content = JsonSerializer.Serialize(train);
        var bodyContent = new StringContent(content, Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync("http://localhost:7001/train", bodyContent);
        var message = await response.Content.ReadFromJsonAsync<TrainResultDto>();
        await jsRuntime.InvokeVoidAsync("alert",message.Message);
    }
}
